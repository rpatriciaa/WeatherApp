#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage[magyar]{babel}
\usepackage{t1enc}
\usepackage{graphicx}% képek beillesztéséhez kell
\usepackage{listings}
\usepackage{tikz}
\usepackage{pgfplots}



\linespread{1.5}
\author{Rácsik Patrícia}
\title{Szakdolgozat}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language magyar
\language_package default
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style polish
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -993690567 "Patrícia"
\author 415188692 "Machalik Károly"
\end_header

\begin_body

\begin_layout Standard
\align center
\begin_inset VSpace bigskip
\end_inset


\begin_inset VSpace bigskip
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hfil
\end_layout

\end_inset

 
\series bold
\size largest
Időjárás-jelentések összehasonlítása
\series default

\begin_inset Newline newline
\end_inset

 
\begin_inset VSpace bigskip
\end_inset


\size large
Rácsik Patrícia 
\begin_inset Newline newline
\end_inset

 
\begin_inset VSpace bigskip
\end_inset

Témavezető: Machalik Károly
\begin_inset Newline newline
\end_inset

 
\begin_inset VSpace bigskip
\end_inset

2020
\begin_inset Newline newline
\end_inset

 
\begin_inset VSpace vfill
\end_inset

Pannon Egyetem
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Műszaki Informatikai Kar
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Rendszer- Számítástudományi Tanszék
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
Programtervező Informatikus BSc
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage newpage
\end_inset


\series bold
\size larger
Nyilatkozat
\series default
\size large
 
\begin_inset Newpage newpage
\end_inset


\series bold
\size larger
Köszönetnyilvánítás
\series default
\size large
 
\begin_inset Newpage newpage
\end_inset


\series bold
\size larger
Tartalmi összefoglaló
\series default
\size large

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size large
Az elmúlt évtized hatalmas technikai fejlődésének köszönhetően ma már szinte
 mindenki hozzáfér olyan felületekhez, melyek az ember mindennapi életének
 megkönnyítésére szolgálnak.
 Ezek közül nagy népszerűségnek örvendenek az időjárás előrejelző oldalak.
 De gondolkoztunk-e már azon, hogy ezek az információk mennyire hasonlítanak
 vagy különböznek egymástól? A hétköznapi felhasználó azt várná el, hogy
 ebben a témakörben különböző felületeken, ugyan eltérő formában, de hasonló
 adatok birtokába juthat.
 Sajnos a tapasztalat ettől jelentős mértékben eltér és egyelőre ezen felületek
 tartalmának összehasonlítására sincs megoldás.
 Szakdolgozatomban a fent felvetett problémára keresem a megoldást.
 A dolgozatban különböző statisztikai és numerikus módszerekkel vizsgálom
 az eltérő időjárási adatokat.
 Szó lesz alkalmazásprogramozási interfészekről (API), az általuk biztosított
 adatok feldolgozásáról, adatbázis tervezéséről, adatok elemzéséről és
\change_deleted 415188692 1584959156
,
\change_unchanged
 vizualizálásról.
\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage pagebreak
\end_inset


\series bold
\size larger
Abstract
\series default
\size large
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage pagebreak
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Bevezetés
\end_layout

\begin_layout Standard

\size large
Témaválasztásom fő mozgató rúgója az volt, hogy megismerje
\change_deleted 415188692 1584960040
n
\change_unchanged
m azon jelenleg rendelkezésre álló adatelemzésre, összehasonlítása és vizualizál
ásra alkalmas módszereket melyek, alkalmasak egy olyan kérdés megoldására,
 mint például az időjárási adatok összehasonlítása.
 Talán az időjárás, mint fogalom elsőre nem hangzik túlságosan érdekesnek
 egy felhasználó számára, viszont a téma mégis rengeteg dolgot foglal magába,
 lehetőség nyílik új ismeretek elsajátítására nem csak az informatika világában,
 de a matematika területén is.
 A téma ezek mellett hatalmas irodalmi terjedelemmel rendelkezik, rengeteg
 platformon ingyenes illetve korlátozott adathozzáférést biztosít, melyek
 mind segítik az elemző
\change_deleted 415188692 1584960271
 
\change_unchanged
munkámat.
\end_layout

\begin_layout Standard

\size large
Az időjárás az élet minden területén megtalálható.
 Nap, mint nap találkozunk vele, de pontos tájékoztatást ritkán tudhatunk
 a magunkénak.
 Véleményem szerint az átlagember nem is mérlegeli, hogy a különböző időjárás
\change_deleted 415188692 1584960328
 
\change_unchanged
-előrejelző platformok mennyire eltérő adatokkal szolgálnak.
 Ha jobban beleássuk magunkat, talán azt mondhatjuk nincs is két egyforma
 tájékoztatás.
 Pedig az egységes és megbízható időjárás-előrejelzés minden bizonnyal nagymérté
kben megkönnyítené az életünket.
 Dolgozatomban erre is keresem a megoldást: melyik az általam vizsgált leginkább
 megbízható platform és nagyjából milyen időjárási viszontagságokra kell
 készülnie az embernek.
\end_layout

\begin_layout Standard

\size large
Fontos megemlíteni, hogy a dolgozatomban nem csak e probléma megoldása motivált,
 hanem a szakmai kíváncsiság is vezérelt.
 Szerettem volna komolyan megismerni az adattudományok világát, több gyakorlati
 tudást szerezni az adatbázisok terén, valamint elsajátítani a Python programozá
si nyelv lehetőségeit, előnyeit.
\end_layout

\begin_layout Standard

\size large
A dolgozatot két fő részre osztottam.
 Az első részében részletezem a dolgozathoz szükséges háttér-információkat,
 szakmai irodalmat
\change_inserted 415188692 1584960727
,
\change_unchanged
 valamint a későbbiekben használt technológiákat.
 A második részben pedig az általam fejlesztett szoftvert készülök bemutatni
 és elemezni a feltárt eredményeket.
\end_layout

\begin_layout Standard

\size large
A dolgozat írása során főként a magyar és külföldi szakirodalmat, internetes
 cikkeket valamint tanulmányaim során elsajátított ismereteimet használtam
 fel.
\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Az időjárás alapjai
\end_layout

\begin_layout Standard

\size large
Az időjárás a napi hőmérséklet és csapadék aktivitására illetve változására
 utal vagy éppen azt írja le, hogy például meleg vagy hideg, nedves vagy
 száraz, szeles, napos vagy esős az idő.
 Ezek a fizikai változások az atmoszférában az az a légkörben történő jelenségek
 következménye.
 Ezek az események általában a légkör legalacsonyabb szintjén a troposzférában,
 a sztratoszféra alatt következnek be.
 Az időjárás kifejezés jellemzően a Föld rövidtávú jellemzőire utal, míg
 az éghajlat kifejezés a légköri viszonyok hosszabb ideig történő átlagolására
 reflektál.
\end_layout

\begin_layout Subsection
Fontos tényezői
\end_layout

\begin_layout Standard

\size large
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center

\size large
\begin_inset Graphics
	filename retegek.jpg
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Légkörünk rétegei
\end_layout

\end_inset


\end_layout

\end_inset

Légkörünkben több réteget különböztetünk meg.Legalsó réteget troposzférának
 nevezzük, ez egyben a Föld a felszíne.
 Jellemző a rétegre, hogy a hőmérséklet a magassággal növekedésével arányosan
 csökken, 100 méterenként átlagosan 0,60-0,70°C -ot.
 A troposzféra felső határán a hőmérséklet -56°C, alsó rétegeiben körülbelül
 15°C.
 Ez követi a sztratoszféra.
 Itt található a nagyjából 20-30 kilométer vastag ózonréteg, amelyre a troposzfé
rával ellentétben jellemző, hogy a hőmérséklet felfelé haladva emelkedik.
 Sztratoszférát követi a mezoszférába, itt a hőmérséklet ismét csökkenni
 kezd, légkörünk leghidegebb rétege.
 A levegő sűrűsége jelentősen alacsonyabb mint a többi rétegben.
 Az ezt követő termoszférában a nagyon magas a hőmérséklet,körülbelül 1200-1400°
C közötti.
 Elmondható a rétegről az is, hogy meglehetősen ritka a levegő így kismértékben
 tartalmaz hőenergiát.
 A légkör 1000 kilométer feletti szakaszán beszélhetünk a exoszféráról.
 Levegő itt is ritka , valamint a termoszférához hasonlóan nagyon magas
 a hőmérséklet.
\end_layout

\begin_layout Standard

\size large
Az időjárást rengeteg tényező befolyásolja, 
\change_deleted 415188692 1584961559
ezek
\change_unchanged
melyek közül a legfontosabbak: légnyomás, páratartalom, szélirány, szélerősség,
 felhőzet valamint a hőmérséklet.
 A nyomás egy felületi egységre ható nyomóerő, fizikai mennyiség amelyet
 a nyomás felületre ható erő és felület hányadosa által értelmezünk.
 Légnyomás esetén a nyomóerőt a légkör egy adott pontja felett elhelyezkedő
 levegőoszlop súlya határozza meg.
 A meteorológiában ennek mértékét hektopascalban (hPa) definiálják.
 A légnyomás a légkörben, emelkedő irányban haladva megközelítőleg exponenciális
an csökken.
 Akkor beszélhetnénk teljesen exponenciális csökkenésről, ha a légkör hőmérsékle
te változatlan maradna, azonban az folyamatosan csökken.
\end_layout

\begin_layout Standard

\size large
Egy hidegfront esetén hűvösebb levegő érkezik a fennálló meleghez.
 A nagyobb tömeg miatt a meleg levegő alá nyomja magát, ennek eredményeképp
 a légnyomás először csökken aztán pedig emelkedik.
 A jelenséget 
\change_deleted -993690567 1585574009
 
\change_unchanged
hőmérséklet csökkenés és esetlegesen csapadék is követi.
 Hasonlóan történik melegfront esetén is.
 Ebben az esetben a meleg levegő a hideg légtömeg fölé furakodik, a légnyomás
 permanensen csökken de a hidegfronttal ellentétben nem emelkedik hanem
 marad az adott szinten.
\change_deleted -993690567 1585575651

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584962609

\size large
Ezt beszéljük meg, mert elvesztettem a fonalat.
 A meleg könnyebb, miért megy alúlra és marad is ott?
\change_unchanged

\end_layout

\end_inset

 
\change_unchanged
Okklúziós frontról beszélünk ha a hideg és a meleg levegő egyszerre érkeznek
 meg.
 Általánosságában kijelenthetjük, hogy a melegfrontot utoléri egy gyorsabban
 mozgó hideg, s ennek hatásai érvényesülnek az időjárásban.
\end_layout

\begin_layout Standard

\size large
Pára akkor jön létre ha a Nap felmelegíti a vizet, majd ennek következtében
 pedig a levegőbe kerül vízgőz formájában.
 Ennek mennyisége attól függ , hogy a víz melegedésének mértéke mekkora.
\change_deleted 415188692 1584963034
.

\change_unchanged
 Ezzel párhuzamosan a légkör párakapacitása is növekszik.
 Páratartalom definiálására két mérőszámot használhatunk: abszolút- valamint
 relatív vízgőztartalom.
 Az abszolút vízgőztartalom segítségével kimutathatjuk, hogy 1
\begin_inset Formula ${\color{black}m^{3}}$
\end_inset

 levegőben milyen mértékű a grammban mért vízgőz tartalom.
 Ezzel ellentétben a relatív vízgőz
\change_deleted 415188692 1584963158
 
\change_unchanged
tartalom azt jelenti, hogy a levegőben lévő vízpára az adott hőmérsékleten
 milyen százalékos értéket mutat, a vízgőzzel teljesen telített levegő víztartal
mához mérten.
\end_layout

\begin_layout Standard

\size large
A levegő esetében - mely légkörünk alapvető alkotóeleme - szélnek nevezzük
 azt a jelenséget, amikor az közelítő
\change_inserted 415188692 1584963296

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584963305

\size large
ha távolodik akkor az nem szél?
\change_unchanged

\end_layout

\end_inset


\change_unchanged
 vízszintes irányú áramlását végez.
 A jelenség a helyi nyomáskülönbségeknek tudható be.
 Sebességét méter/másodpercben adják meg, erősségét pedig Beaufort-skálán
 osztályozzák.
 A Beaufort szélerősség-skála a szél erősségének megfigyelésére és osztályozásár
a használatos fokozatrendszer.

\change_deleted -993690567 1585575394
 
\change_unchanged

\end_layout

\begin_layout Standard

\size large
A szél irányát az határozza meg mely égtáj felől érkezik.
 Tehát keleti szélről beszélhetünk, ha a szél keleti irányból nyugat felé
 fúj.
 Sok esetben fokkal is jellemzik, így 0° északi, 90° keleti, 180° déli valamint
 270° esetén nyugati szélnek nevezzük ezeket.
 A meteorológiában 10 fokos pontosságot használnak.
 A légmozgás sebessége alatt, magát a szél sebességét értjük.
 A meteorológusok számára Beaufort-skála szolgál a szél sebességének jellemzéséh
ez.
\change_deleted -993690567 1585575645

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584963751

\size large
Többször is említed a Beaufort-skálát, de sehol sem 
\begin_inset Quotes pld
\end_inset

magyarázod
\begin_inset Quotes prd
\end_inset

 meg.
 Szerintem egy mondat jó lenne, hogy mi a skála jellemzője.
\change_unchanged

\end_layout

\end_inset


\change_unchanged
 Ismertebb szélfajták például a:
\change_inserted -993690567 1585575596
 
\change_unchanged
hurrikán, tornádó, orkán.

\change_inserted 415188692 1584963801
 
\change_deleted -993690567 1585575611

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584963817

\size large
Ezekről is kellene egy-egy mondat, vagy nem kell az egész felsorolás ;)
\change_unchanged

\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\size large
A levegőbe felszálló vízpárából parányi vízcseppek és jégkristályok halmaza
 alakul ki.
 Ez a jelenség
\change_inserted -993690567 1585575742
 
\change_unchanged
a légkörünkben jól található, és a mindennapokban felhőnek nevezzük.
 Ezek eredményeképpen csapadék, pl.
 eső vagy akár jégeső is keletkezhet, de a talaj közelében is találkozhatunk
 vele, köd formájában.
 Diszperz rendszer, azaz egymástól független részecskékből áll, amely a
 fény útját is takarja
\change_deleted -993690567 1585575733

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584964043
Hogy, mit csinál a fény útjával? :)
\change_unchanged

\end_layout

\end_inset


\change_unchanged
.
 
\change_deleted -993690567 1585575735
 
\change_unchanged
A felhők tipizálásánál a következő tulajdonságokat vesszük figyelembe: méret,
 forma, szerkezet, textúra, fényhatás, szín, valamint a felhőalap magassága.
 Forma szerint 14 felhőtípust különböztetünk meg, anyaguk szerint pedig
 víz-,
\change_inserted 415188692 1584964114
 
\change_unchanged
jég és vegyes halmazállapotú felhőket.
\end_layout

\begin_layout Subsection
Meteorológia
\change_inserted -993690567 1585576278

\end_layout

\begin_layout Standard

\change_inserted -993690567 1585576282
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center

\change_inserted -993690567 1585576336
\begin_inset Graphics
	filename meteokep.png
	lyxscale 60
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\change_inserted -993690567 1585576297
Meteorológia 
\change_unchanged

\end_layout

\end_inset


\change_unchanged

\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\size large
A meteorológia - vagy ha régies nevét használjuk légtüneménytan - előrejelzésekk
el és időjárási folyamatokkal foglalkozik.
 Az időjárás megfigyelése már az ókorban elkezdődött, az első feljegyzések
 már a mezopotámiai kultúrából származnak, de találhatunk ókori görög-római
 és kínai annotációt is.
 Maga a kifejezés Arisztotelész Meteorológia című művéből származik.
 Galileo Galilei az elsők között készített termoszkopót
\change_inserted 415188692 1584964280

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584964304

\size large
Azért az biztos, hogy a termoszpók sokkal izgalmasabb lenne :D
\change_unchanged

\end_layout

\end_inset


\change_unchanged
, melynek segítségével bizonyította a hőmérséklet lehetőségét.
 Saját termoszkópja ugyanis jelezte a meleg levegő tágulásának jelenségét.
 Blaise Pascal fedezte fel, hogyha emelkedünk a tengerszinttől akkor a légnyomás
 csökken, amiből következtethetünk arra , hogy a légkör felett vákuum van.
 Anders Celsius nevéhez fűződik az általunk is mindennap használt hőmérőbeosztás.
 Robert Hooke, Edmun Halley, George Hadley, Benjamin Franklin, Luke Howard
 és még rengetek más embert hozzájárult ahhoz, hogy napjainkban pontos méréseket
 készíthessünk.
\end_layout

\begin_layout Standard

\size large
A numerikus időjárás-előrejelzés a XX.
 század elején vált elérhetővé, a légköri dinamika megismerésének és fejlődéséne
k eredményeképp.
 Lewis Fry Richardson 
\begin_inset Quotes pld
\end_inset

Időjárás-előrejelzés numerikus eljárásokkal
\begin_inset Quotes prd
\end_inset

 című könyvében olvashatunk arról, hogy rövidebb időszakok előrejelzésére
 numerikus megoldás található.
 A kezdeti időjárás-előrejelzéseknél komoly gondot okozott, hogy a kalkulációkho
z létfontosságú számok túlságosan nagynak bizonyultak 
\change_inserted 415188692 1584964617
- 
\change_unchanged
egészen az első számítógépek megjelenéséig.
 Az 1950-es évek elején a számítógépek már lehetővé tették a 
\change_deleted 415188692 1584964650
 
\change_unchanged
számítások elvégzését.
 Az első időjárás-előrejelzések a barotropikus modellekből származtak, melyekből
 sikeresen meg lehetett becsülni a középmagas légkörben elhelyezkedő
\change_inserted 415188692 1584964706
,
\change_unchanged
 nagy mozgású Rossby hullámokat, amik az alacsony, illetve a magas légköri
 nyomást rajzolják ki.
\end_layout

\begin_layout Standard

\size large
A műholdas megfigyelések az 1960-as években váltak elérhetővé, mivel a TIROS-1
 időjárás-előrejelző műhold ekkor került fellövésre.
 Segítségével rendkívül gyorsan, mondhatni pillanatok alatt adatokat juttattak
 a világ egyik pontjából a másikba.
 Az időjárási- és a különböző magasságokban keringő, általános célú megfigyelőmű
holdak elengedhetetlen eszközévé váltak a meteorológusoknak.
 Napjainkban azon éghajlati modelleket fejlesztik, amelyek összeegyeztethetőek
 a régebbi időjárás-előrejelző rendszerekkel.
 Ezen éjhajlati modellek segítségével megfigyelhetőek a hosszan tartó éghajlatvá
ltozások.
 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\size large
Az időjárás előrejelzéséhez különböző eljárások léteznek: 
\end_layout

\begin_layout Itemize

\size large
Változatlanság 
\end_layout

\begin_layout Itemize

\size large
Tendencia 
\end_layout

\begin_layout Itemize

\size large
Éghajlattan 
\end_layout

\begin_layout Itemize

\size large
Analóg módszer 
\end_layout

\begin_layout Itemize

\size large
Numerikus időjárás-előrejelzés 
\end_layout

\begin_layout Standard

\size large
A változatlanság szerint a kondíciók nem változnak, hosszútávú előrejelzés
 esetén a leghasznosabb módszer.
 A tendencia alatt értjük a frontok sebességének és irányának definiálását,
 valamint a magas és alacsony légnyomással bíró lokációk és a felhős,csapadékos
 területek meghatározását is.
 Az éghajlattan a tapasztalati adatok felhasználását jelenti az adott nap
 meghatározásához.
 Összetett eljárásnak mondhatjuk az analóg módszert, mely régi adathalmazokból
 hasonló időjárási körülményeket mutat A numerikus időjárás-előrejelzés
 pedig számítógépek segítségével, magas számú változó használatával, légköri
 modellt generál.
 Napjainkban ez a legsikeresebb és legszélesebben használt módszer.
\end_layout

\begin_layout Subsection
Emberi hatásai
\end_layout

\begin_layout Standard

\size large
Manapság a populáció fele időjárás-érzékeny.
 Az időjárás-érzékenység akár társadalmi betegségnek is mondható.
 Ha a természetes környezeti hatásoktól rendszeresen elszigetelődünk, akkor
 
\change_deleted -993690567 1585576071
  
\change_unchanged
csökken a teljes társadalmi teljesítőképesség.
 Minél korosabb az adott egyén annál inkább jellemző, hogy jobban reflektál
 az időjárás-változásokra.
 Mivel idővel lassabban játszódnak le a belső folyamatok, testünk nem tud
 oly módon alkalmazkodni mint korábban, így időjárás-érzékennyé válunk.
 Tünetek közé tartok az: idegesség, alvási zavarok, kimerültség de akár
 a depresszió, szív- és keringési zavarok is.
 Kisgyermekek és csecsemők szintén érzékenyek lehetnek az időjárás-változásokra.
 Esetükben csökken a koncentrációképesség valamint a felfogóképesség, és
 kimerültebbé is válhatnak.
 Kutatások szerint a nők gyakrabban és érzékenyebben reagálnak a szélsőséges
 időjárás-változásokra mint férfi társaik.
 Ez a különbség már fiatalabb, kisiskolás korban is előfordul.
\end_layout

\begin_layout Standard

\size large
Az időjárás-érzékenység a földrajzi elhelyezkedésen is múlik.
 Példaként említeném, hogy a közép-európai népek rendkívül érzékenyek, mivel
 a közepes szélességeken élők, átlagosan akár hat naponta ki vannak téve
 egy-egy front átvonulásának.
 Vizsgálatok az mutatják, hogy mi magyarok általában a melegfrontra vagyunk
 érzékenyek, ellenben a franciák vagy az angolok a hidegre.
\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Használt technológiák
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pythonkep1.png
	scale 50

\end_inset


\begin_inset Graphics
	filename sqlkep1.png
	scale 50

\end_inset


\begin_inset Graphics
	filename apikep1.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Használt technológiák logói 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size large
A szakdolgozat kezdeti fázisában alaposan átgondoltam, valamint mérlegeltem,
 hogy melyek azok technológiák amik elengedhetetlenek lehetnek a megvalósításhoz.
 Tanulmányaim során is találkoztam már nagy részükkel, viszont az internet
 segítségévél is tájékozódtam, továbbá kikértem tanáraim és az egyetem munkatárs
ainak tanácsát is.
 A dolgozat elkészítéséhez elsősorban szükségem volt egy adatbázisra, amihez
 az általam is jól ismert és korábban már használt Microsoft SQL Server-re
 esett a választásom.
 Az adatok begyűjtéséhez, vizualizálásához és az elemzéséhez a Python programozá
si nyelv és annak különböző könyvtárainak lehetőségeivel éltem.
 Fontos még megemlítenem azt is, hogy az adatok begyűjtése alkalmazásprogramozás
i interfészek azaz API hívások segítségével történt.
 A következőben ezeket szeretném részletesen bemutatni, valamint szemléltetni
 melyek azok az okok, amik miatt az említett technológiák mellett döntöttem.
\end_layout

\begin_layout Subsection
Alkalmazási interfészek
\end_layout

\begin_layout Standard

\size large
Angol nyelven application programming interface kifejezésként ismert, rövidítése
 API.
 Ha egyszerűen próbáljuk megmagyarázni az API tulajdonképpen egy olyan szoftverk
özvetítő közeg, ahol két applikáció képes egymással kommunikálni.
 Máshogy fogalmazva, az API egy üzenetküldő ami az egyik oldal kérését továbbítj
a a másik oldal felé, majd ennek válaszát visszajuttatja a kezdeményezőnek.
 Ha egy fejlesztő egy alkalmazást készít, nem feltétlen a nulláról indul
 neki a feladatnak.
 Az API-k lehetővé teszik a fejlesztők számára, hogy ismétlődő, mégis összetett
 folyamatokat készítsenek egy rövidebb kódot felhasználva.
 Mivel az API-k kezelhetősége egyszerű és egységes, nagy mértékben hozzájárulnak
 ahhoz , hogy a mai alkalmazásfejlesztés gyors ütemével képesek legyenek
 lépést tartani a fejlesztők: Továbbá előny, hogy az alkalmazás működési
 sebességére is pozitív hatással van az, hogy az API kérések válaszideje
 szűk határidőn belül megvalósul.
\end_layout

\begin_layout Standard

\size large
Számos alkalmazási interfészt különböztetünk meg, mint például Java API
 vagy alkalmazásokon belüli interfészek.
 A programközpontú API-k között még találkozhatunk olyan web alapú alkalmazi
 interfészekkel mint például a Simple Object Access Protocol (röviden SOAP)
 melynek üzenetei XML alapúak, vagy a távoli eljáráshívás, angolul Remote
 Procedure Call.
 Fontos megemlíteni a REST azaz Representational State Transfer protokolt
 is mely napjainkban talán a legelterjedtebb és legismertebb API technológia.
 Nagyjából 15 000 publikus, bárki számára használható API érhető el a programozó
k számára, ezen felül pedig rengeteg magánkézben lévő szolgáltatás létezik,
 melyeket a vállalatok saját belső és külső kapacitásuk bővítésére használnak.
\end_layout

\begin_layout Standard

\size large
De miért is fontos ez számunkra és miben járul hozzá a megvalósításhoz?
 Ahhoz, hogy időjárást tudjuk elemezni nagy mennyiségű időjárási adatra
 van szükségünk.
 Ezek a különböző, már említett nyilvánosan elérhető API-k segítségével
 könnyen összegyűjthetőek.
 Az adatokat API hívás segítségével tudjuk elérni.
 Sokféle, különböző típusú kérés létezik, GET, POST, DELETE és PUT.
 A POST segítségével új adatok lehet létrehozni.
 Nem biztonságos , ugyanis ha egy illetéktelen személy sikeresen hozzáfér
 az elindított kéréshez, könnyedén birtokában kerülhet a kérésben megtalálható
 adat.
 A PUT a már egy meglévő adat módosítására használtató.
 A DELETE legkevésbé problémás kérés, segítségével adatokat lehet eltávolítani.
 Az adatok lekérésére a leggyakrabban használt módszer a GET kérés.
 Mivel esetemben csak az adatok lekérésére létfontosságú, ezért a hangsúlyt
 GET kérések benyújtására fordítottam.
 Amikor egy kérést küldünk a szolgáltató felé, az API-tól kapott eredmény
 válaszkód formájában érkezik meg.
 A kapott eredmény nem csak a kért adatokat tartalmazza, hanem ez mutatja
 a művelet sikerességét is.
 A kódok azért is fontosak mert megtudhatjuk, hogy milyen hiba történt egy-egy
 hibás hívás esetén.
 Annak érdekében, hogy sikeres kérést nyújtsunk be, nagy segítséget nyújtanak
 a fejlesztési dokumentációk.
 Gyakori eset, hogy egy adott kiszolgálón több API is található.
 Ezeket az API-kat endpointoknak azaz végpontoknak nevezzük.
 A végpontok tartalmazzák azokat az adatokat melyek számunkra fontosak lehetnek.
 A mai, korszerű API-k legtöbb esetben JSON formátumú adatokkal kommunikálnak.
\end_layout

\begin_layout Standard

\size large
A JSON (JavaScript Object Notation) az API nyelve, adatszerkezetek kódolására
 alkalmas.
 Főként adatok továbbítására alkalmazzák szerverek és web alapú applikációk
 között.
 Ember számára is olvasható adatcserére tervezték és modern programnyelvek
 mellett is könnyen használható.
\end_layout

\begin_layout Subsection
A Python programnyelv
\end_layout

\begin_layout Standard

\size large
1989 végén Guido van Rossum holland származású programozó kezdte meg a fejleszté
sét, majd 1991-ben hozta nyilvánosságra.
 Készítésekor a fő szempontok közé tartozott, hogy könnyen olvasható legyen.
 Támogatja a funkcionális, az objektumorientált, az imperatív és a procedurális
 programozási paradigmákat.
 Hasonlíta Perl, Ruby és Scheme nyelvekhez mivel automatikus memóriakezelést
 és dinamikus típusokat használ.
 A legfrissebb PYPL PopularitY of Programming Language 2020 márciusi rangsorolás
a szerint, az első helyen szerepel programozási nyelvek közül.
 Felhasználható asztali grafikus felhasználói felületek, webhelyek és webes
 alkalmazások fejlesztésére is.
\end_layout

\begin_layout Standard

\size large
Több oka is van annak, hogy miért választottam a Python nyelvet a dolgozat
 alapjaként:
\end_layout

\begin_layout Itemize

\size large
Fontos szempont volt, hogy könnyen érthető és olvasható legyen bárki számára.
 A Python a könnyen elsajátítható programnyelvek közé tartozik, mely elsősorban
 az angol nyelvhez való hasonlóságának köszönhető.
 A nyelv szintaxisára jellemző, hogy nagyon kevés a szabály és a különleges
 eset.
 Nyugodtan kijelenthetjük, hogy a Python a kódolásra fókuszál, és nem a
 nyelvi bonyolultságokat helyezi előtérbe.
\end_layout

\begin_layout Itemize

\size large
Cross-Platform valamint nyílt forráskódú.
 Linux, Windows vagy macOS platformonon is működnek a Python-ban írt kódok.
 Támogatja objektum-orientált programozást is, de kisebb programok, tool-ok
 fejlesztését is alkalmas
\end_layout

\begin_layout Itemize

\size large
A Python a Data Science és a mesterséges intelligenciák legelterjedtebb
 nyelve napjainkban, mindkét témakör nagyban érinti a dolgozatom témáját
 is.
 Legyen szó szoftverfejlesztésről vagy marketingről, napjainkban minden
 munkaügyi szektor rengeteg adatot használ és hagy maga után, ezek elemezése
 valamint megértése nagyban befolyásolja további működésüket, stratégiájukat.
 A Python rengeteg adattudományokhoz kapcsoló könyvtárral rendelkezik, melyeket
 a későbbiek folyamán részletesebben szándékozok kifejteni.
\end_layout

\begin_layout Itemize

\size large
Valamint rengeteg grafikus felületet is támogat ezek között a projektben
 megjelenik a Python Kivy könyvtára amely nagyon modern és letisztult külsőt
 kölcsönöz, abszolút megállja helyét napjainkban.
\end_layout

\begin_layout Subsection
Python általánosságban- és az adattudományokban használt könyvtárak
\end_layout

\begin_layout Standard

\size large
A Python nagy előnye, hogy rengetek problémára már megoldással rendelkezik.
 Funkciók és metódusok rengetege van már könyvtárakba foglalva annak érdekében,
 hogy kevesebb kódot kelljen írnia a fejlesztőknek.
 Rengeteg standard könyvtárral rendelkezik mint például 
\begin_inset Quotes pld
\end_inset

time
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

random
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

urlib
\begin_inset Quotes prd
\end_inset

,
\begin_inset Quotes prd
\end_inset

math
\begin_inset Quotes prd
\end_inset

.
 Különböző SQL modulokkal is rendelkezik, ezek közül kiemelném a Microsoft
 Sql Server-hez általam is használt 
\begin_inset Quotes pld
\end_inset

pyodbc
\begin_inset Quotes prd
\end_inset

, mely többek közt felel az adatbázishoz való kapcsolódásért, adat- lekérdezésér
t és beszúrásért.
 Természetesen léteznek más, nem csak MSSQL használatát támogató könyvtárak
 is mint például a 
\begin_inset Quotes pld
\end_inset

SQLite
\begin_inset Quotes prd
\end_inset

 vagy a 
\begin_inset Quotes pld
\end_inset

xc_Oracle
\begin_inset Quotes prd
\end_inset

.
 
\end_layout

\begin_layout Standard

\size large
Talán a könytárak sokasága tette oly népszerűvé a Python az adattudományok
 világában.
 A 
\begin_inset Quotes pld
\end_inset

Numpy
\begin_inset Quotes prd
\end_inset

 és a 
\begin_inset Quotes pld
\end_inset

Pandas
\begin_inset Quotes prd
\end_inset

 könyvtárak megjelenésével a Python kiemelkedő jelentőségűvé vált az adatvilágba
n.
 Statisztikai, táblázatos és mátrix struktúrájú adatokat is kezel, ezeket
 „Matplotlib” és a „Seaborn” könyvtársak segítségével képes vizualizálni.
 Jelenünkben nem vitás, hogy a jövő informatikáját a mesterséges intelligencia
 vezetni fogja.
 A Python machine learning könyvtárai, például a Keras és a TensorFlow,
 lehetővé teszik a számunkra gépi tanulás fejlesztését is.
 Az olyan könyvtárak, mint például az 
\begin_inset Quotes pld
\end_inset

OpenCV
\begin_inset Quotes prd
\end_inset

 pedig elősegítik a számítógépes látást vagy a képfelismerést.
\end_layout

\begin_layout Standard

\size large
Az .edureka.co weboldal 2020 februári cikkje szerint a top tíz python könytár
 rendre a következők:
\end_layout

\begin_layout Itemize

\size large
TensorFlow 
\end_layout

\begin_layout Itemize

\size large
Scikit-Learn 
\end_layout

\begin_layout Itemize

\size large
Numpy Keras 
\end_layout

\begin_layout Itemize

\size large
PyTorch 
\end_layout

\begin_layout Itemize

\size large
LightGBM 
\end_layout

\begin_layout Itemize

\size large
Eli5
\end_layout

\begin_layout Itemize

\size large
SciPy
\end_layout

\begin_layout Itemize

\size large
Theano 
\end_layout

\begin_layout Itemize

\size large
Pandas
\end_layout

\begin_layout Subsection
Relációs Adatbázisok és Microsoft Sql Server
\end_layout

\begin_layout Standard

\size large
Relációs adatbázisok olyan digitális adatbázisok melyek a relációs adatmodellen
 alapszik.
 A relációs adatbázisok kezeléséhez használt szoftvereket relációs adatbázis-kez
elő rendszerek röviden RDBMS nevezzük.
 Számos relációs adatbázisrendszernek képes az SQL azaz Structured Query
 Language(magyarul lekérdezőnyelv) használatára, ez általa lehetőségünk
 nyílik lekérdezni és karbantartani az adatbázisok tartalmát.
 A táblák minden sora rendelkezik a saját egyedi azonosítóval, kulccsal.
 A táblák sorai összekapcsolhatók más táblák soraival, ha rendelkeznek úgy
 nevezett idegen kulccsal.
\end_layout

\begin_layout Standard

\size large
Habár a feladat nem követeli meg az Microsoft Sql Server használatát, mégis
 úgy láttam hosszútávon kifizetődőbb vele dolgozni.
\end_layout

\begin_layout Standard

\size large
elakadtam :(( szívesen fogadokj tippeket miért is jobb az MSSQL, hirtelen
 csak ennyi van hogy: gyorsabb, több funkció talán, T-SQL
\change_inserted 415188692 1584967968

\begin_inset Note Comment
status open

\begin_layout Plain Layout

\change_inserted 415188692 1584967983

\size large
Megbeszéljük!
\change_unchanged

\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section

\size large
Adatbázis tervezése
\end_layout

\begin_layout Standard

\size large
Az adatbázis tervezésénél törekedtem a rekord-orientált felépítésre.
 Habár a mező-orientált modellezésnek is számos előnye van
\change_inserted 415188692 1584968011
 -
\change_deleted 415188692 1584968012
,
\change_unchanged
 például nehézség nélkül programozható és effektív grafikus felhasználói
 felület készítése is támogatott
\change_deleted 415188692 1584968018
,
\change_inserted 415188692 1584968019
 -
\change_unchanged
 
\change_deleted 415188692 1584968026
mégis
\change_inserted 415188692 1584968029
 azonban
\change_unchanged
 nehezen változtatható a fejlesztés későbbi szakaszaiban
\change_deleted 415188692 1584968039
 
\change_unchanged
, ami sok időveszteséggel ás hátulütővel járhat.
 Természetesen a rekord-orientált modellnek is vannak hátrányai.
 Az adatokat több táblából tudjuk csak elérni, ez 
\change_deleted 415188692 1584968055
sok
\change_inserted 415188692 1584968056
több
\change_unchanged
 lekérdezést vagy JOIN-t jelenthet melyek egyes fejlesztők számára első
\change_deleted 415188692 1584968066
re
\change_unchanged
 hangzásra bonyolultnak tűnhet.
 Ezzel szemben viszont nagyon rugalmas, struktúrája könnyedén változtatható,
 
\change_inserted 415188692 1584968080
a 
\change_unchanged
módosítások
\change_deleted 415188692 1584968082
at
\change_unchanged
 nem jelentenék az alkalmazás teljesen összeomlását.
 Ezek mellett 
\change_inserted 415188692 1584968093
legtöbbször 
\change_unchanged
sokkal hatékonyabb és időtálló modell.
\end_layout

\begin_layout Subsection
Adatbázis Séma
\end_layout

\begin_layout Standard
\align center

\size large
\begin_inset Graphics
	filename database.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard

\size large
Az adatbázis összesen hét táblából áll össze.
 Ezek rendere a következők:
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\size large
Lehet, hogy ezt később kéne csak megnézni, akkor ha már fix a séma.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\size large
City: Különböző városok adatait tárolja.
 Részletesebben a városok neveit, hosszúsági- valamint szélességi körök
 koordinátáit.
\end_layout

\begin_layout Itemize

\size large
API: API szolgáltatok adatait tárolja.
 API-hoz tartozó kulcsok melyek segítségével az API hívások történnek, valamint
 a forrás ahonnan az adatokat lekérjük.
\end_layout

\begin_layout Itemize

\size large
Attribute: Tárolja az attribútumomat melyeket vizsgálunk, például: szélirány,hőm
érséklet.
 Ezek neveit és típusát találjuk a táblában.
\end_layout

\begin_layout Itemize

\size large
JsonAttributes: Az adott szolgáltatóhoz tartozó attribútumokat tárolja.
 Megtalálható az API és az attribútum azonosítója, valamint a JSON-ban használt
 név.
\end_layout

\begin_layout Itemize

\size large
Weather: Az időjárási adatokat azonosítására szolgál.
 Tárolja a lekérés pontos időpontját, mely napra kértük le az előrejelzést,
 továbbá városhoz és az API-hoz tartozó azonosítót.
 Fontos tudni mely városra kértük le az előrejelzést milyen szolgáltatón
 keresztül.
\end_layout

\begin_layout Itemize

\size large
WeatherAttributes: Tárolja az pontos értékeket az adott attribútumokhoz.
 Szöveges érték esetén csak a ezen értékek azonosítója tárolandó.
\end_layout

\begin_layout Itemize

\size large
ValueVC: Szöveges értékek tárolására szolgál, segítségével rengeteg felesleges
 adattól szabadulunk meg, az ugyanolyan elnevezésű adatok mint például 
\begin_inset Quotes pld
\end_inset

napos idő
\begin_inset Quotes prd
\end_inset

 elég egyszer eltárolni és mindig hivatkozni rá.
\end_layout

\begin_layout Standard

\size large
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard

\size large
Az ábrán látható, hogy egyes adatokat csak úgy tudunk lekérdezni, hogyha
 több táblát összekapcsolunk.
 Például ha szeretnénk megtudni, hogy Veszprémben egy bizonyos szolgáltató,
 milyen hőmérsékletet ígért egy adott időpontra, szükséges összekapcsolni
 a City, Api, JsonAttributes, Attribute, Weather és WeatherAttributes táblákat.
 Mint említettem ezek elsőre összetettnek és körülményesnek tűnik, viszont
 egy új tábla vagy egy új attribútum könnyedén beépíthető.
\end_layout

\begin_layout Subsection
Nézetek és triggerek
\end_layout

\begin_layout Standard

\size large
erről is gondoltam irni pár sort
\change_inserted 415188692 1584968192

\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\change_inserted 415188692 1584968266

\size large
Mindenképp! :) Pont itt oldanád fel a rekord-orientált adatmodell 
\begin_inset Quotes pld
\end_inset

hibáit
\begin_inset Quotes prd
\end_inset

.
\change_unchanged

\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\size large
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section

\size large
Adatgyűjtés Python segítségével
\end_layout

\begin_layout Standard

\size large
rövid ismertető
\end_layout

\begin_layout Subsection
API hívások, API-k amiket használok
\end_layout

\begin_layout Standard

\size large
free oldalak bemutatása, dokumentáció és lehetőségek, api hívások pythonba
\change_inserted 415188692 1584968607
n
\change_unchanged

\end_layout

\begin_layout Subsection
JSON Feldolgozás
\end_layout

\begin_layout Standard

\size large
Json feldolgozása python segítségével
\end_layout

\begin_layout Subsection
Adatbázis és Python kapcsolata
\end_layout

\begin_layout Standard

\size large
milyen király hogy adatbázisba
\change_inserted 415188692 1584968279
n
\change_unchanged
 minden benne -> le
\change_inserted 415188692 1584968282
 
\change_unchanged
tudok kérni minden
\change_inserted 415188692 1584968286
t
\change_unchanged
 + tárolás
\end_layout

\end_body
\end_document
